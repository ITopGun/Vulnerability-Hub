import React, { useState, useEffect, useRef } from 'react';
import { useHistory } from 'react-router';
import { Navbar, Container, Nav } from 'react-bootstrap';
import auth from '../auth/auth';
import { Grid, GridColumn, GridToolbar } from "@progress/kendo-react-grid";
import { ExcelExport } from "@progress/kendo-react-excel-export";
import { GridPDFExport } from "@progress/kendo-react-pdf";
import EditForm from "./editForm";
import { filterBy } from "@progress/kendo-data-query";
import { Notification } from "@progress/kendo-react-notification";
import { Slide } from "@progress/kendo-react-animation";
import { CSVLink } from "react-csv";

export const Home = (props) => {
  const [user, setUser] = useState({
    "id": "",
    "email": "",
    "is_active": true,
    "is_superuser": false,
    "firstName": "",
    "lastName": ""
  });

  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [isEdit, setIsEdit] = useState(0);
  const [notifyStatus, setNotifyStatus] = useState('error');
  const [notifyMessage, setNotifyMessage] = useState('');
  // History hook
  const history = useHistory();

  // Function to call logout
  const callLogout = async () => {
    auth.logout(() => {
      history.push('/');
    });
  };

  // Fetch user information on page load
  useEffect(() => {
    const fetchData = async () => {
      if (auth.isAuthenticated()){
        const result = await auth.getUser();
        if(!result.id) callLogout();
        setUser(result);
        const vulnerabilities_result = await auth.getVulnerabilities();
        for(var i=1;i<=vulnerabilities_result.length;i++){
          vulnerabilities_result[i-1]['numid'] = i;
        }
        setVulnerabilities(vulnerabilities_result)
      };
    };
    fetchData();
  // eslint-disable-next-line
  }, []);

  // ================= Kendo Grid Section ========================
  
  const initialFilter = {
    logic: "and",
    filters: [
      {
        field: "type",
        operator: "contains",
        value: "",
      },
    ],
  };

  const [openForm, setOpenForm] = useState(false);
  const [editItem, setEditItem] = useState({
    ProductID: 1,
  });
  const [notifyShow, setNotifyShow] = useState(false)
  const [filter, setFilter] = useState(initialFilter);

  const csvHeaders = [
    { label: "Type", key: "type" },
    { label: "CVE", key: "cve" },
    { label: "Vulnerability Name", key: "name" },
    { label: "Vulnerability solution", key: "solution" }
  ];

  const _export = useRef(null);

  const showNotification = (nst, msg) => {
    setNotifyShow(true);
    setNotifyStatus(nst);
    setNotifyMessage(msg);
    setTimeout(() => {
      setNotifyShow(false);
    }, 5000);
  }

  const excelExport = () => {
    if (_export.current !== null) {
      _export.current.save();
    }
  };

  let gridPDFExport;

  const exportPDF = () => {
    if (gridPDFExport !== null) {
      gridPDFExport.save();
    }
  };

  const enterEdit = (item) => {
    setIsEdit(1);
    item['headerTxt'] = 'Edit';
    item['btnTxt'] = "Update";
    setOpenForm(true);
    setEditItem(item);
    console.log(item)
  };

  const enterAdd = () => {
    setIsEdit(0);
    setOpenForm(true);
    var item = {_id: '', type: '', cve: '', name: '', solution: '', headerTxt: 'Add New', btnTxt: 'Add'}
    setEditItem(item);
    console.log(item)
  }

  const handleSubmit = async (event) => {
    if(isEdit === 1){
      const updateResult = await auth.saveVulnerability(event);
      if(updateResult._id){
        let newData = vulnerabilities.map((item) => {
          if (event._id === item._id) {
            item = { ...event };
          }

          return item;
        });
        console.log(newData)
        setVulnerabilities(newData);
        setOpenForm(false);
        showNotification('success', 'Data is updated successfully.');
      } else {
        showNotification('error', 'Updating data is failed.');
      }
    } else {
      var tempVulnerabilities = vulnerabilities.slice();
      const addResult = await auth.addVulnerability(event);
      if(addResult._id){
        addResult['numid'] = tempVulnerabilities.length + 1;
        tempVulnerabilities.push(addResult)
        setVulnerabilities(tempVulnerabilities)
        setOpenForm(false);
        showNotification('success', 'Data is added successfully.');
      } else {
        showNotification('error', 'Adding data is failed.');
      }
    }
  };

  const handleCancelEdit = () => {
    setOpenForm(false);
  };

  const onRemoveClick = async (item) => {
    const deleteResult = await auth.deleteVulnerability(item);
    if(deleteResult.result){
      var tempVulnerabilities = vulnerabilities.slice()
      for(var i=0; i<tempVulnerabilities.length;i++){
        if(tempVulnerabilities[i]['_id']===deleteResult._id){
          tempVulnerabilities.splice(i, 1);
          break;
        }
      }
      for(i=0; i<tempVulnerabilities.length;i++){
        tempVulnerabilities[i]['numid'] = i + 1;
      }
      setVulnerabilities(tempVulnerabilities);
      showNotification('success', 'Data is removed successfully.');
    } else {
      showNotification('error', 'Deleting data is failed.');
    }
  }

  const EditCommandCell = (props) => {
    return (
      <td className="k-command-cell">
        <button
          className="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary"
          onClick={() => props.enterEdit(props.dataItem)}
        >
          Edit
        </button>
        <button
          className="k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-grid-remove-command"
          onClick={() => onRemoveClick(props.dataItem)}
        >
          Remove
        </button>
      </td>
    );
  };

  const MyEditCommandCell = (props) => (
    <EditCommandCell {...props} enterEdit={enterEdit} />
  );

  const notification = (
    <Slide
      direction={notifyShow ? "up" : "down"}
      style={{
        position: 'fixed',
        bottom: 20,
        right: 20
      }}
    >
      {notifyShow && (
        <Notification
          type={{
            style: notifyStatus,
            icon: true,
          }}
          closable={true}
          onClose={() => setNotifyShow(false)}
        >
          <span>{notifyMessage}</span>
        </Notification>
      )}
    </Slide>
  )

  const grid = (
    <Grid
      data={filterBy(vulnerabilities, filter)}
      filterable={true}
      filter={filter}
      onFilterChange={(e) => setFilter(e.filter)}
    >
      <GridToolbar>
        {(
          user.is_superuser &&
          <>
            <button
              title="Add New"
              className="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary"
              onClick={enterAdd}
            >
              Add New
            </button>
          </>
        )}
        <CSVLink
          className="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary"
          style={{color: "#FFF"}}
          { ...{'data': vulnerabilities, 'headers': csvHeaders, 'filename': 'Vulnerability Solutions.csv'}}
        >
          Export to CSV
        </CSVLink>
        <button
          title="Export Excel"
          className="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary"
          onClick={excelExport}
        >
          Export to Excel
        </button>
        <button
          title="Export PDF"
          className="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary"
          onClick={exportPDF}
        >
          Export to PDF
        </button>
      </GridToolbar>
      <GridColumn field="numid" filterable={false} title="#" width="40px" />
      <GridColumn field="type" title="Type" />
      <GridColumn field="cve" title="CVE" />
      <GridColumn field="name" title="Name" />
      <GridColumn field="solution" title="Solutions" />
      {(
        user.is_superuser &&
        <GridColumn filterable={false} cell={MyEditCommandCell} />
      )}
    </Grid>
  )
  
  return (
    <>
      <Navbar className="align-middle justify-content-between" expand="lg" bg="dark" variant="dark" style={{ padding: 20 }}>
        <Container>
          <Navbar.Brand href="/">
            <img
              alt=""
              src='/logo512.png'
              width="40"
              height="40"
              className="d-inline-block align-top"
            />
            <strong>Vulnerability Solutions</strong>
          </Navbar.Brand>
          <Navbar.Toggle aria-controls="basic-navbar-nav" />
          <Navbar.Collapse id="basic-navbar-nav">
            <Nav className="ms-auto">
              <Nav.Link href="/">Home</Nav.Link>
              <Nav.Link href="#link">Link</Nav.Link>
              <Nav.Link onClick={callLogout}>Logout</Nav.Link>
            </Nav>
          </Navbar.Collapse>
        </Container>
      </Navbar>
      <Container className="mt-4">
        <ExcelExport data={vulnerabilities} ref={_export}>
          {grid}
        </ExcelExport>
        <GridPDFExport ref={(pdfExport) => (gridPDFExport = pdfExport)}>
          {grid}
        </GridPDFExport>
        {openForm && (
          <EditForm
            cancelEdit={handleCancelEdit}
            onSubmit={handleSubmit}
            item={editItem}
          />
        )}
        {notification}
      </Container>
    </>
  );
};
